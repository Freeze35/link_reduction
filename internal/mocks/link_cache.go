// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// LinkCache is an autogenerated mock type for the LinkCache type
type LinkCache struct {
	mock.Mock
}

type LinkCache_Expecter struct {
	mock *mock.Mock
}

func (_m *LinkCache) EXPECT() *LinkCache_Expecter {
	return &LinkCache_Expecter{mock: &_m.Mock}
}

// GetOriginalURL provides a mock function with given fields: ctx, shortLink
func (_m *LinkCache) GetOriginalURL(ctx context.Context, shortLink string) (string, error) {
	ret := _m.Called(ctx, shortLink)

	if len(ret) == 0 {
		panic("no return value specified for GetOriginalURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, shortLink)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, shortLink)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortLink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkCache_GetOriginalURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOriginalURL'
type LinkCache_GetOriginalURL_Call struct {
	*mock.Call
}

// GetOriginalURL is a helper method to define mock.On call
//   - ctx context.Context
//   - shortLink string
func (_e *LinkCache_Expecter) GetOriginalURL(ctx interface{}, shortLink interface{}) *LinkCache_GetOriginalURL_Call {
	return &LinkCache_GetOriginalURL_Call{Call: _e.mock.On("GetOriginalURL", ctx, shortLink)}
}

func (_c *LinkCache_GetOriginalURL_Call) Run(run func(ctx context.Context, shortLink string)) *LinkCache_GetOriginalURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LinkCache_GetOriginalURL_Call) Return(_a0 string, _a1 error) *LinkCache_GetOriginalURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LinkCache_GetOriginalURL_Call) RunAndReturn(run func(context.Context, string) (string, error)) *LinkCache_GetOriginalURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetShortLink provides a mock function with given fields: ctx, originalURL
func (_m *LinkCache) GetShortLink(ctx context.Context, originalURL string) (string, error) {
	ret := _m.Called(ctx, originalURL)

	if len(ret) == 0 {
		panic("no return value specified for GetShortLink")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, originalURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, originalURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, originalURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkCache_GetShortLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShortLink'
type LinkCache_GetShortLink_Call struct {
	*mock.Call
}

// GetShortLink is a helper method to define mock.On call
//   - ctx context.Context
//   - originalURL string
func (_e *LinkCache_Expecter) GetShortLink(ctx interface{}, originalURL interface{}) *LinkCache_GetShortLink_Call {
	return &LinkCache_GetShortLink_Call{Call: _e.mock.On("GetShortLink", ctx, originalURL)}
}

func (_c *LinkCache_GetShortLink_Call) Run(run func(ctx context.Context, originalURL string)) *LinkCache_GetShortLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LinkCache_GetShortLink_Call) Return(_a0 string, _a1 error) *LinkCache_GetShortLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LinkCache_GetShortLink_Call) RunAndReturn(run func(context.Context, string) (string, error)) *LinkCache_GetShortLink_Call {
	_c.Call.Return(run)
	return _c
}

// SetOriginalURL provides a mock function with given fields: ctx, shortLink, originalURL, ttl
func (_m *LinkCache) SetOriginalURL(ctx context.Context, shortLink string, originalURL string, ttl time.Duration) error {
	ret := _m.Called(ctx, shortLink, originalURL, ttl)

	if len(ret) == 0 {
		panic("no return value specified for SetOriginalURL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) error); ok {
		r0 = rf(ctx, shortLink, originalURL, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkCache_SetOriginalURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOriginalURL'
type LinkCache_SetOriginalURL_Call struct {
	*mock.Call
}

// SetOriginalURL is a helper method to define mock.On call
//   - ctx context.Context
//   - shortLink string
//   - originalURL string
//   - ttl time.Duration
func (_e *LinkCache_Expecter) SetOriginalURL(ctx interface{}, shortLink interface{}, originalURL interface{}, ttl interface{}) *LinkCache_SetOriginalURL_Call {
	return &LinkCache_SetOriginalURL_Call{Call: _e.mock.On("SetOriginalURL", ctx, shortLink, originalURL, ttl)}
}

func (_c *LinkCache_SetOriginalURL_Call) Run(run func(ctx context.Context, shortLink string, originalURL string, ttl time.Duration)) *LinkCache_SetOriginalURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *LinkCache_SetOriginalURL_Call) Return(_a0 error) *LinkCache_SetOriginalURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LinkCache_SetOriginalURL_Call) RunAndReturn(run func(context.Context, string, string, time.Duration) error) *LinkCache_SetOriginalURL_Call {
	_c.Call.Return(run)
	return _c
}

// SetShortLink provides a mock function with given fields: ctx, originalURL, shortLink, ttl
func (_m *LinkCache) SetShortLink(ctx context.Context, originalURL string, shortLink string, ttl time.Duration) error {
	ret := _m.Called(ctx, originalURL, shortLink, ttl)

	if len(ret) == 0 {
		panic("no return value specified for SetShortLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) error); ok {
		r0 = rf(ctx, originalURL, shortLink, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkCache_SetShortLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetShortLink'
type LinkCache_SetShortLink_Call struct {
	*mock.Call
}

// SetShortLink is a helper method to define mock.On call
//   - ctx context.Context
//   - originalURL string
//   - shortLink string
//   - ttl time.Duration
func (_e *LinkCache_Expecter) SetShortLink(ctx interface{}, originalURL interface{}, shortLink interface{}, ttl interface{}) *LinkCache_SetShortLink_Call {
	return &LinkCache_SetShortLink_Call{Call: _e.mock.On("SetShortLink", ctx, originalURL, shortLink, ttl)}
}

func (_c *LinkCache_SetShortLink_Call) Run(run func(ctx context.Context, originalURL string, shortLink string, ttl time.Duration)) *LinkCache_SetShortLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *LinkCache_SetShortLink_Call) Return(_a0 error) *LinkCache_SetShortLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LinkCache_SetShortLink_Call) RunAndReturn(run func(context.Context, string, string, time.Duration) error) *LinkCache_SetShortLink_Call {
	_c.Call.Return(run)
	return _c
}

// NewLinkCache creates a new instance of LinkCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLinkCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *LinkCache {
	mock := &LinkCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
