// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	models "linkreduction/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// LinkRepo is an autogenerated mock type for the LinkRepo type
type LinkRepo struct {
	mock.Mock
}

type LinkRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *LinkRepo) EXPECT() *LinkRepo_Expecter {
	return &LinkRepo_Expecter{mock: &_m.Mock}
}

// DeleteOldLinks provides a mock function with given fields: ctx, threshold
func (_m *LinkRepo) DeleteOldLinks(ctx context.Context, threshold string) error {
	ret := _m.Called(ctx, threshold)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOldLinks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, threshold)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkRepo_DeleteOldLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOldLinks'
type LinkRepo_DeleteOldLinks_Call struct {
	*mock.Call
}

// DeleteOldLinks is a helper method to define mock.On call
//   - ctx context.Context
//   - threshold string
func (_e *LinkRepo_Expecter) DeleteOldLinks(ctx interface{}, threshold interface{}) *LinkRepo_DeleteOldLinks_Call {
	return &LinkRepo_DeleteOldLinks_Call{Call: _e.mock.On("DeleteOldLinks", ctx, threshold)}
}

func (_c *LinkRepo_DeleteOldLinks_Call) Run(run func(ctx context.Context, threshold string)) *LinkRepo_DeleteOldLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LinkRepo_DeleteOldLinks_Call) Return(_a0 error) *LinkRepo_DeleteOldLinks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LinkRepo_DeleteOldLinks_Call) RunAndReturn(run func(context.Context, string) error) *LinkRepo_DeleteOldLinks_Call {
	_c.Call.Return(run)
	return _c
}

// FindByOriginalURL provides a mock function with given fields: ctx, originalURL
func (_m *LinkRepo) FindByOriginalURL(ctx context.Context, originalURL string) (string, error) {
	ret := _m.Called(ctx, originalURL)

	if len(ret) == 0 {
		panic("no return value specified for FindByOriginalURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, originalURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, originalURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, originalURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkRepo_FindByOriginalURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByOriginalURL'
type LinkRepo_FindByOriginalURL_Call struct {
	*mock.Call
}

// FindByOriginalURL is a helper method to define mock.On call
//   - ctx context.Context
//   - originalURL string
func (_e *LinkRepo_Expecter) FindByOriginalURL(ctx interface{}, originalURL interface{}) *LinkRepo_FindByOriginalURL_Call {
	return &LinkRepo_FindByOriginalURL_Call{Call: _e.mock.On("FindByOriginalURL", ctx, originalURL)}
}

func (_c *LinkRepo_FindByOriginalURL_Call) Run(run func(ctx context.Context, originalURL string)) *LinkRepo_FindByOriginalURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LinkRepo_FindByOriginalURL_Call) Return(_a0 string, _a1 error) *LinkRepo_FindByOriginalURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LinkRepo_FindByOriginalURL_Call) RunAndReturn(run func(context.Context, string) (string, error)) *LinkRepo_FindByOriginalURL_Call {
	_c.Call.Return(run)
	return _c
}

// FindByShortLink provides a mock function with given fields: ctx, shortLink
func (_m *LinkRepo) FindByShortLink(ctx context.Context, shortLink string) (string, error) {
	ret := _m.Called(ctx, shortLink)

	if len(ret) == 0 {
		panic("no return value specified for FindByShortLink")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, shortLink)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, shortLink)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortLink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkRepo_FindByShortLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByShortLink'
type LinkRepo_FindByShortLink_Call struct {
	*mock.Call
}

// FindByShortLink is a helper method to define mock.On call
//   - ctx context.Context
//   - shortLink string
func (_e *LinkRepo_Expecter) FindByShortLink(ctx interface{}, shortLink interface{}) *LinkRepo_FindByShortLink_Call {
	return &LinkRepo_FindByShortLink_Call{Call: _e.mock.On("FindByShortLink", ctx, shortLink)}
}

func (_c *LinkRepo_FindByShortLink_Call) Run(run func(ctx context.Context, shortLink string)) *LinkRepo_FindByShortLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LinkRepo_FindByShortLink_Call) Return(_a0 string, _a1 error) *LinkRepo_FindByShortLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LinkRepo_FindByShortLink_Call) RunAndReturn(run func(context.Context, string) (string, error)) *LinkRepo_FindByShortLink_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: ctx, originalURL, shortLink
func (_m *LinkRepo) Insert(ctx context.Context, originalURL string, shortLink string) error {
	ret := _m.Called(ctx, originalURL, shortLink)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, originalURL, shortLink)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkRepo_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type LinkRepo_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - originalURL string
//   - shortLink string
func (_e *LinkRepo_Expecter) Insert(ctx interface{}, originalURL interface{}, shortLink interface{}) *LinkRepo_Insert_Call {
	return &LinkRepo_Insert_Call{Call: _e.mock.On("Insert", ctx, originalURL, shortLink)}
}

func (_c *LinkRepo_Insert_Call) Run(run func(ctx context.Context, originalURL string, shortLink string)) *LinkRepo_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *LinkRepo_Insert_Call) Return(_a0 error) *LinkRepo_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LinkRepo_Insert_Call) RunAndReturn(run func(context.Context, string, string) error) *LinkRepo_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// InsertBatch provides a mock function with given fields: ctx, links
func (_m *LinkRepo) InsertBatch(ctx context.Context, links []models.LinkURL) error {
	ret := _m.Called(ctx, links)

	if len(ret) == 0 {
		panic("no return value specified for InsertBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.LinkURL) error); ok {
		r0 = rf(ctx, links)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkRepo_InsertBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertBatch'
type LinkRepo_InsertBatch_Call struct {
	*mock.Call
}

// InsertBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - links []models.LinkURL
func (_e *LinkRepo_Expecter) InsertBatch(ctx interface{}, links interface{}) *LinkRepo_InsertBatch_Call {
	return &LinkRepo_InsertBatch_Call{Call: _e.mock.On("InsertBatch", ctx, links)}
}

func (_c *LinkRepo_InsertBatch_Call) Run(run func(ctx context.Context, links []models.LinkURL)) *LinkRepo_InsertBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]models.LinkURL))
	})
	return _c
}

func (_c *LinkRepo_InsertBatch_Call) Return(_a0 error) *LinkRepo_InsertBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LinkRepo_InsertBatch_Call) RunAndReturn(run func(context.Context, []models.LinkURL) error) *LinkRepo_InsertBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewLinkRepo creates a new instance of LinkRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLinkRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *LinkRepo {
	mock := &LinkRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
