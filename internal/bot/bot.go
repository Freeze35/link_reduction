package bot

import (
	"context"
	"crypto/tls"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/IBM/sarama"
	tele "gopkg.in/telebot.v4"
	"linkreduction/internal/config"
	"linkreduction/internal/kafka"
	initprometheus "linkreduction/internal/prometheus"
	"linkreduction/internal/service"
	"log"
	"net/http"
	"net/url"
	"strings"
	"time"
)

type Bot struct {
	ctx      context.Context
	cfg      *config.Config
	bot      *tele.Bot
	service  *service.Service
	producer sarama.SyncProducer
	metrics  *initprometheus.PrometheusMetrics
}

func StartBot(ctx context.Context, cfg *config.Config, service *service.Service, producer sarama.SyncProducer, metrics *initprometheus.PrometheusMetrics) error {
	httpClient := &http.Client{
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{
				InsecureSkipVerify: true,
			},
		},
		Timeout: 10 * time.Second,
	}

	pref := tele.Settings{
		Token:  cfg.BotToken,
		Poller: &tele.LongPoller{Timeout: 10 * time.Second},
		Client: httpClient, // ‚Üê –ø–æ–¥–∫–ª—é—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π http-–∫–ª–∏–µ–Ω—Ç
	}

	newBot, err := tele.NewBot(pref)
	if err != nil {
		return err
	}
	log.Printf("bot is running")
	b := &Bot{ctx, cfg, newBot, service, producer, metrics}
	b.registerHandlers()
	go newBot.Start() // –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≥–æ—Ä—É—Ç–∏–Ω—É
	return nil
}

func (b *Bot) registerHandlers() {
	b.bot.Handle("/start", func(c tele.Context) error {
		return c.Send("–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –ª—é–±—É—é –¥–ª–∏–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –∫–æ—Ä–æ—Ç–∫—É—é üîó\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π URL, –∏ —è —Å–æ–∑–¥–∞–º —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–¥–µ —É–≥–æ–¥–Ω–æ ‚Äî –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö, –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö, –Ω–∞ —Å–∞–π—Ç–∞—Ö. –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ –Ω–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
	})

	b.bot.Handle(tele.OnText, b.handleShortenRequest)
}

func (b *Bot) handleShortenRequest(c tele.Context) error {
	originalURL := c.Text()

	err := b.validateOriginalURL(originalURL)

	if err != nil {
		b.registerHandlers()
		return c.Send("–û—à–∏–±–∫–∞: " + err.Error())
	}

	baseURL := b.cfg.Server.BaseURL

	shortLink, err := b.service.ShortenURL(b.ctx, originalURL)
	if err != nil {
		b.registerHandlers()
		return c.Send("internal server error")
	}

	shortURL := fmt.Sprintf("%s/%s", baseURL, shortLink)

	// –ï—Å–ª–∏ Kafka –¥–æ—Å—Ç—É–ø–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	if b.producer != nil {
		message := &kafka.ShortenMessage{OriginalURL: originalURL, ShortLink: shortLink}
		messageBytes, err := json.Marshal(message)
		if err != nil {

			if b.metrics != nil && b.metrics.CreateShortLinkTotal != nil {
				b.metrics.CreateShortLinkTotal.WithLabelValues("error", "kafka_serialization").Inc()
			}
			b.registerHandlers()
			return c.Send("internal server error")
		}

		_, _, err = b.producer.SendMessage(&sarama.ProducerMessage{
			Topic: kafka.ShortenURLsTopic,
			Value: sarama.ByteEncoder(messageBytes),
		})
		if err != nil {
			if b.metrics != nil && b.metrics.CreateShortLinkTotal != nil {
				b.metrics.CreateShortLinkTotal.WithLabelValues("error", "kafka_send").Inc()
			}
			b.registerHandlers()
			return c.Send("internal server error")
		}

	} else {
		// –ï—Å–ª–∏ Kafka –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
		if err := b.service.InsertLink(b.ctx, originalURL, shortLink); err != nil {
			if b.metrics != nil && b.metrics.CreateShortLinkTotal != nil {
				b.metrics.CreateShortLinkTotal.WithLabelValues("error", "db_insert").Inc()
			}
			b.registerHandlers()
			return c.Send("internal server error")
		}
	}
	if b.metrics != nil && b.metrics.CreateShortLinkTotal != nil {
		b.metrics.CreateShortLinkTotal.WithLabelValues("success", "none").Inc()
	}
	b.registerHandlers()
	return c.Send(shortURL)
}

func (b *Bot) validateOriginalURL(originalURL string) error {

	maxURLLength := 2048

	if originalURL == "" {
		return errors.New("URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}

	hostName := b.cfg.Server.HostName

	if strings.Contains(originalURL, hostName) {
		return errors.New("—ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –Ω–µ–π")
	}

	// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É –≤ –±–∞–π—Ç–∞—Ö
	if len(originalURL) > maxURLLength {
		return errors.New("URL –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É 2048 –±–∞–π—Ç")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã
	if !strings.HasPrefix(originalURL, "http://") && !strings.HasPrefix(originalURL, "https://") {
		return errors.New("URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
	_, err := url.ParseRequestURI(originalURL)
	if err != nil {
		return errors.New("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL")
	}

	return nil
}
