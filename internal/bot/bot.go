package bot

import (
	"context"
	"crypto/tls"
	"fmt"
	"github.com/IBM/sarama"
	"github.com/sirupsen/logrus"
	tele "gopkg.in/telebot.v4"
	"linkreduction/internal/config"
	initprometheus "linkreduction/internal/prometheus"
	"linkreduction/internal/service"
	"net/http"
	"time"
)

type Bot struct {
	ctx      context.Context
	cfg      *config.Config
	bot      *tele.Bot
	service  *service.Service
	producer sarama.SyncProducer
	metrics  *initprometheus.PrometheusMetrics
	logger   *logrus.Logger
}

func StartBot(ctx context.Context, cfg *config.Config, service *service.Service, producer sarama.SyncProducer, metrics *initprometheus.PrometheusMetrics, logger *logrus.Logger) error {
	httpClient := &http.Client{
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{
				InsecureSkipVerify: true,
			},
		},
		Timeout: 10 * time.Second,
	}

	pref := tele.Settings{
		Token:  cfg.BotToken,
		Poller: &tele.LongPoller{Timeout: 10 * time.Second},
		Client: httpClient,
	}

	newBot, err := tele.NewBot(pref)
	if err != nil {
		return err
	}

	b := &Bot{ctx, cfg, newBot, service, producer, metrics, logger}
	b.registerHandlers()
	go newBot.Start()
	return nil
}

func (b *Bot) registerHandlers() {
	b.bot.Handle("/start", func(c tele.Context) error {
		return c.Send("–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –ª—é–±—É—é –¥–ª–∏–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –∫–æ—Ä–æ—Ç–∫—É—é " +
			"üîó\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π URL, –∏ —è —Å–æ–∑–¥–∞–º —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Å, " +
			"–∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–¥–µ —É–≥–æ–¥–Ω–æ ‚Äî –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö, –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö, –Ω–∞ —Å–∞–π—Ç–∞—Ö. " +
			"–ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ –Ω–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
	})

	b.bot.Handle(tele.OnText, b.handleShortenRequest)
}

func (b *Bot) handleShortenRequest(c tele.Context) error {
	originalURL := c.Text()

	baseURL := b.cfg.Server.BaseURL

	shortLink, err := b.service.ShortenURL(b.ctx, originalURL, baseURL)
	if err != nil {
		err := c.Send(err.Error())
		if err != nil {
			b.logger.Error(err)
		}
		return fmt.Errorf("shorten URL: %w", err)
	}

	err = b.service.SendMessageToDB(originalURL, shortLink)
	if err != nil {
		err := c.Send(err.Error())
		if err != nil {
			b.logger.Error(err)
		}
		return err
	}

	shortURL := fmt.Sprintf("%s/%s", baseURL, shortLink)

	err = c.Send(shortURL)
	if err != nil {
		b.logger.Error(err)
		return err
	}

	return nil
}
